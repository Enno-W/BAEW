t.test(Dynamics ~ Status, data = df)
t.test(NA_base ~ Status, data = long_df)
### Direkter Vergleich der Gruppenunterschiede
df<-df%>% mutate(Status = ifelse(completed_count == 6, 1, 0))
t.test(NA_ave ~ Status, data = df)
t.test(Dynamics ~ Status, data = df)
t.test(NA_base ~ Status, data = long_df)
t.test(Locus ~ Status, data = long_df)
t.test(Locus ~ Status, data = df)
t.test(Dynamics ~ Status, data = df)
t.test(NA_base ~ Status, data = df)
t.test(Locus ~ Status, data = df)
df <- df %>%
mutate(Status = if_else(Status == 1, "abgeschlossen", "nicht abgeschlossen"))
library(ggplot2)
ggplot(df, aes(x = Status, y = NA_ave, group = Status, fill = Status)) +
geom_violin(trim = FALSE, color = NA, alpha = 0.7) +
geom_boxplot(width = 0.1, outlier.shape = NA, color = "black") +
geom_point(position = position_jitter(width = 0.15), shape = 21, color = "black") +
scale_fill_manual(
values = c("abgeschlossen" = "black", "nicht abgeschlossen" = "grey")
) +
labs(
x = "Status",
y = "M negativer Affekt"
) +
theme_blank()
plot_violin_with_points <- function(data, y_var_name, y_label = NULL) {
ggplot(data, aes(x = Status, y = data[[y_var_name]], group = Status, fill = Status)) +
geom_violin(trim = FALSE, color = NA, alpha = 0.7) +
geom_boxplot(width = 0.1, outlier.shape = NA, color = "black") +
geom_point(position = position_jitter(width = 0.15), shape = 21, color = "black") +
scale_fill_manual(values = c("abgeschlossen" = "black", "nicht abgeschlossen" = "grey")) +
labs(
x = "Status",
y = if (!is.null(y_label)) y_label else y_var_name
) +
theme_blank()
}
plot_violin_with_points(df, "NA_ave", "M negativer Affekt")
ggplot(df, aes(x = Status, y = NA_ave, group = Status, fill = Status)) +
geom_violin(trim = FALSE, color = NA, alpha = 0.7) +
geom_boxplot(width = 0.1, outlier.shape = NA, color = "black") +
geom_point(position = position_jitter(width = 0.15), shape = 21, color = "black") +
scale_fill_manual(
values = c("abgeschlossen" = "black", "nicht abgeschlossen" = "grey")
) +
labs(
x = "Status",
y = "M negativer Affekt"
) +
theme_blank()
plot_violin_with_points(df, "NA_ave", "M negativer Affekt")
plot_violin_with_points(df, "NA_ave", "M negativer Affekt")
plot_violin_with_points <- function(data, y_var_name, y_label = NULL) {
ggplot(data, aes(x = Status, y = data[[y_var_name]], group = Status, fill = Status)) +
geom_violin(trim = FALSE, color = NA, alpha = 0.7) +
geom_boxplot(width = 0.1, outlier.shape = NA, color = "black") +
geom_point(position = position_jitter(width = 0.15), shape = 21, color = "black") +
scale_fill_manual(values = c("abgeschlossen" = "black", "nicht abgeschlossen" = "grey")) +
labs(
x = "Status",
y = if (!is.null(y_label)) y_label else y_var_name
) +
theme_blank()
}
plot_violin_with_points(df, "NA_ave", "M negativer Affekt")
ggplot(data, aes(x = Status, y = .data[[y_var_name]], group = Status, fill = Status)) +
geom_violin(trim = FALSE, color = NA, alpha = 0.7) +
geom_boxplot(width = 0.1, outlier.shape = NA, color = "black") +
geom_point(position = position_jitter(width = 0.15), shape = 21, color = "black") +
scale_fill_manual(values = c("abgeschlossen" = "black", "nicht abgeschlossen" = "grey")) +
labs(
x = "Status",
y = if (!is.null(y_label)) y_label else y_var_name
) +
theme_blank()
plot_violin_with_points <- function(data, y_var_name, y_label = NULL) {
ggplot(data, aes(x = Status, y = .data[[y_var_name]], group = Status, fill = Status)) +
geom_violin(trim = FALSE, color = NA, alpha = 0.7) +
geom_boxplot(width = 0.1, outlier.shape = NA, color = "black") +
geom_point(position = position_jitter(width = 0.15), shape = 21, color = "black") +
scale_fill_manual(values = c("abgeschlossen" = "black", "nicht abgeschlossen" = "grey")) +
labs(
x = "Status",
y = if (!is.null(y_label)) y_label else y_var_name
) +
theme_blank()
}
plot_violin_with_points(df, "NA_ave", "M negativer Affekt")
plot_violin_with_points(df, "NA_base", "Negativer Affekt bei Baseline")
plot_violin_with_points(df, "Dynamics", "Variabilität")
plot_violin_with_points(df, "Locus", "Locus")
vergleich_plot <- function(data, y_var_name, y_label = NULL) {
ggplot(data, aes(x = Status, y = .data[[y_var_name]], group = Status, fill = Status)) +
geom_violin(trim = FALSE, color = NA, alpha = 0.7) +
geom_boxplot(width = 0.1, outlier.shape = NA, color = "black") +
geom_point(position = position_jitter(width = 0.15), shape = 21, color = "black") +
scale_fill_manual(values = c("abgeschlossen" = "black", "nicht abgeschlossen" = "grey")) +
labs(
x = "Status",
y = if (!is.null(y_label)) y_label else y_var_name
) +
theme_blank()
}
vergleich_plot(df, "NA_ave", "M negativer Affekt")
vergleich_plot(df, "NA_base", "Negativer Affekt bei Baseline")
vergleich_plot(df, "Dynamics", "Variabilität")
vergleich_plot(df, "Locus", "Locus")
A<-vergleich_plot(df, "NA_ave", "M negativer Affekt")
B<-vergleich_plot(df, "NA_base", "Negativer Affekt bei Baseline")
C<-vergleich_plot(df, "Dynamics", "Variabilität")
D<-vergleich_plot(df, "Locus", "Locus")
(A+B)/(B+C)
ggplot(data, aes(x = Status, y = .data[[y_var_name]], group = Status, fill = Status)) +
geom_violin(trim = FALSE, color = NA, alpha = 0.7) +
geom_boxplot(width = 0.1, outlier.shape = NA, color = "black") +
geom_point(position = position_jitter(width = 0.15), shape = 21, color = "black") +
scale_fill_manual(values = c("abgeschlossen" = "black", "nicht abgeschlossen" = "grey")) +
labs(
x = "Status",
y = if (!is.null(y_label)) y_label else y_var_name
) +
theme_blank()+
theme(legend.position = "none")
vergleich_plot <- function(data, y_var_name, y_label = NULL) {
ggplot(data, aes(x = Status, y = .data[[y_var_name]], group = Status, fill = Status)) +
geom_violin(trim = FALSE, color = NA, alpha = 0.7) +
geom_boxplot(width = 0.1, outlier.shape = NA, color = "black") +
geom_point(position = position_jitter(width = 0.15), shape = 21, color = "black") +
scale_fill_manual(values = c("abgeschlossen" = "black", "nicht abgeschlossen" = "grey")) +
labs(
x = "Status",
y = if (!is.null(y_label)) y_label else y_var_name
) +
theme_blank()+
theme(legend.position = "none")
}
A<-vergleich_plot(df, "NA_ave", "M negativer Affekt")
B<-vergleich_plot(df, "NA_base", "Negativer Affekt bei Baseline")
C<-vergleich_plot(df, "Dynamics", "Variabilität")
D<-vergleich_plot(df, "Locus", "Locus")
(A+B)/(B+C)
Status_vergleich_plot<-((A+B)/(B+C))
ggplot(data, aes(x = Status, y = .data[[y_var_name]], group = Status, fill = Status)) +
geom_violin(trim = FALSE, color = NA, alpha = 0.7) +
geom_boxplot(width = 0.1, outlier.shape = NA, color = "black", fill="grey") +
geom_point(position = position_jitter(width = 0.15), shape = 21, color = "black") +
scale_fill_manual(values = c("abgeschlossen" = "black", "nicht abgeschlossen" = "grey")) +
labs(
x = "Status",
y = if (!is.null(y_label)) y_label else y_var_name
) +
theme_blank()+
theme(legend.position = "none")
vergleich_plot <- function(data, y_var_name, y_label = NULL) {
ggplot(data, aes(x = Status, y = .data[[y_var_name]], group = Status, fill = Status)) +
geom_violin(trim = FALSE, color = NA, alpha = 0.7) +
geom_boxplot(width = 0.1, outlier.shape = NA, color = "black", fill="grey") +
geom_point(position = position_jitter(width = 0.15), shape = 21, color = "black") +
scale_fill_manual(values = c("abgeschlossen" = "black", "nicht abgeschlossen" = "grey")) +
labs(
x = "Status",
y = if (!is.null(y_label)) y_label else y_var_name
) +
theme_blank()+
theme(legend.position = "none")
}
A<-vergleich_plot(df, "NA_ave", "M negativer Affekt")
B<-vergleich_plot(df, "NA_base", "Negativer Affekt bei Baseline")
C<-vergleich_plot(df, "Dynamics", "Variabilität")
D<-vergleich_plot(df, "Locus", "Locus")
Status_vergleich_plot<-((A+B)/(B+C))
Status_vergleich_plot
ggplot(data, aes(x = Status, y = .data[[y_var_name]], group = Status, fill = Status)) +
geom_violin(trim = FALSE, color = NA, alpha = 0.5) +
geom_boxplot(width = 0.1, outlier.shape = NA, color = "black", fill="grey") +
geom_point(position = position_jitter(width = 0.15), shape = 21, color = "black") +
scale_fill_manual(values = c("abgeschlossen" = "black", "nicht abgeschlossen" = "grey")) +
labs(
x = "Status",
y = if (!is.null(y_label)) y_label else y_var_name
) +
theme_blank()+
theme(legend.position = "none")
vergleich_plot <- function(data, y_var_name, y_label = NULL) {
ggplot(data, aes(x = Status, y = .data[[y_var_name]], group = Status, fill = Status)) +
geom_violin(trim = FALSE, color = NA, alpha = 0.5) +
geom_boxplot(width = 0.1, outlier.shape = NA, color = "black", fill="grey") +
geom_point(position = position_jitter(width = 0.15), shape = 21, color = "black") +
scale_fill_manual(values = c("abgeschlossen" = "black", "nicht abgeschlossen" = "grey")) +
labs(
x = "Status",
y = if (!is.null(y_label)) y_label else y_var_name
) +
theme_blank()+
theme(legend.position = "none")
}
A<-vergleich_plot(df, "NA_ave", "M negativer Affekt")
B<-vergleich_plot(df, "NA_base", "Negativer Affekt bei Baseline")
C<-vergleich_plot(df, "Dynamics", "Variabilität")
D<-vergleich_plot(df, "Locus", "Locus")
Status_vergleich_plot<-((A+B)/(B+C))
vergleich_plot <- function(data, y_var_name, y_label = NULL) {
ggplot(data, aes(x = Status, y = .data[[y_var_name]], group = Status, fill = Status)) +
geom_violin(trim = FALSE, color = NA, alpha = 0.7) +
geom_boxplot(
width = 0.1,
outlier.shape = NA,
fill = "grey80",      # Helle Box
color = "black",      # Rand & Whiskers
size = 0.5            # Dicke der Linien
) +
geom_point(position = position_jitter(width = 0.15), shape = 21, color = "black") +
scale_fill_manual(values = c("abgeschlossen" = "black", "nicht abgeschlossen" = "grey")) +
labs(
x = "Status",
y = if (!is.null(y_label)) y_label else y_var_name
) +
theme_blank() +
theme(legend.position = "none")
}
A<-vergleich_plot(df, "NA_ave", "M negativer Affekt")
A
ggplot(data, aes(x = Status, y = .data[[y_var_name]], group = Status, fill = Status)) +
geom_violin(trim = FALSE, color = NA, alpha = 0.5) +
geom_boxplot(width = 0.1, outlier.shape = NA, color = "black", fill="grey") +
stat_boxplot(geom="errorbar"),
ggplot(data, aes(x = Status, y = .data[[y_var_name]], group = Status, fill = Status)) +
geom_violin(trim = FALSE, color = NA, alpha = 0.5) +
geom_boxplot(width = 0.1, outlier.shape = NA, color = "black", fill="grey") +
stat_boxplot(geom="errorbar")+
geom_point(position = position_jitter(width = 0.15), shape = 21, color = "black") +
scale_fill_manual(values = c("abgeschlossen" = "black", "nicht abgeschlossen" = "grey")) +
labs(
x = "Status",
y = if (!is.null(y_label)) y_label else y_var_name
) +
theme_blank()+
theme(legend.position = "none")
vergleich_plot <- function(data, y_var_name, y_label = NULL) {
ggplot(data, aes(x = Status, y = .data[[y_var_name]], group = Status, fill = Status)) +
geom_violin(trim = FALSE, color = NA, alpha = 0.5) +
geom_boxplot(width = 0.1, outlier.shape = NA, color = "black", fill="grey") +
stat_boxplot(geom="errorbar")+
geom_point(position = position_jitter(width = 0.15), shape = 21, color = "black") +
scale_fill_manual(values = c("abgeschlossen" = "black", "nicht abgeschlossen" = "grey")) +
labs(
x = "Status",
y = if (!is.null(y_label)) y_label else y_var_name
) +
theme_blank()+
theme(legend.position = "none")
}
A<-vergleich_plot(df, "NA_ave", "M negativer Affekt")
B<-vergleich_plot(df, "NA_base", "Negativer Affekt bei Baseline")
C<-vergleich_plot(df, "Dynamics", "Variabilität")
D<-vergleich_plot(df, "Locus", "Locus")
Status_vergleich_plot<-((A+B)/(B+C))
Status_vergleich_plot
ggplot(data, aes(x = Status, y = .data[[y_var_name]], group = Status, fill = Status)) +
geom_violin(trim = FALSE, color = NA, alpha = 0.5) +
geom_boxplot(width = 0.1, outlier.shape = NA, color = "black", fill="grey") +
stat_boxplot(geom="errorbar", width=.5)+
geom_point(position = position_jitter(width = 0.15), shape = 21, color = "black") +
scale_fill_manual(values = c("abgeschlossen" = "black", "nicht abgeschlossen" = "grey")) +
labs(
x = "Status",
y = if (!is.null(y_label)) y_label else y_var_name
) +
theme_blank()+
theme(legend.position = "none")
vergleich_plot <- function(data, y_var_name, y_label = NULL) {
ggplot(data, aes(x = Status, y = .data[[y_var_name]], group = Status, fill = Status)) +
geom_violin(trim = FALSE, color = NA, alpha = 0.5) +
geom_boxplot(width = 0.1, outlier.shape = NA, color = "black", fill="grey") +
stat_boxplot(geom="errorbar", width=.5)+
geom_point(position = position_jitter(width = 0.15), shape = 21, color = "black") +
scale_fill_manual(values = c("abgeschlossen" = "black", "nicht abgeschlossen" = "grey")) +
labs(
x = "Status",
y = if (!is.null(y_label)) y_label else y_var_name
) +
theme_blank()+
theme(legend.position = "none")
}
A<-vergleich_plot(df, "NA_ave", "M negativer Affekt")
B<-vergleich_plot(df, "NA_base", "Negativer Affekt bei Baseline")
C<-vergleich_plot(df, "Dynamics", "Variabilität")
D<-vergleich_plot(df, "Locus", "Locus")
Status_vergleich_plot<-((A+B)/(B+C))
Status_vergleich_plot
ggplot(data, aes(x = Status, y = .data[[y_var_name]], group = Status, fill = Status)) +
geom_violin(trim = FALSE, color = NA, alpha = 0.5) +
geom_boxplot(width = 0.1, outlier.shape = NA, color = "black", fill="grey") +
stat_boxplot(geom="errorbar", width=.5)+
geom_point(position = position_jitter(width = 0.15), shape = 21, color = "black") +
scale_fill_manual(values = c("abgeschlossen" = "black", "nicht abgeschlossen" = "grey")) +
labs(
x = NULL,
y = if (!is.null(y_label)) y_label else y_var_name
) +
theme_blank()+
theme(legend.position = "none")
vergleich_plot <- function(data, y_var_name, y_label = NULL) {
ggplot(data, aes(x = Status, y = .data[[y_var_name]], group = Status, fill = Status)) +
geom_violin(trim = FALSE, color = NA, alpha = 0.5) +
geom_boxplot(width = 0.1, outlier.shape = NA, color = "black", fill="grey") +
stat_boxplot(geom="errorbar", width=.5)+
geom_point(position = position_jitter(width = 0.15), shape = 21, color = "black") +
scale_fill_manual(values = c("abgeschlossen" = "black", "nicht abgeschlossen" = "grey")) +
labs(
x = NULL,
y = if (!is.null(y_label)) y_label else y_var_name
) +
theme_blank()+
theme(legend.position = "none")
}
A<-vergleich_plot(df, "NA_ave", "M negativer Affekt")
B<-vergleich_plot(df, "NA_base", "Negativer Affekt bei Baseline")
C<-vergleich_plot(df, "Dynamics", "Variabilität")
D<-vergleich_plot(df, "Locus", "Locus")
Status_vergleich_plot<-((A+B)/(B+C))
Status_vergleich_plot
Status_vergleich_plot<-((A+B)/(C+D))
source("C:/Users/enno_/OneDrive - Ennos Deutschkurs/A Fernstudium Kursmaterial/Bachelorarbeit/Script/Values+Tables.R", echo = TRUE)
source("C:/Users/enno_/OneDrive - Ennos Deutschkurs/A Fernstudium Kursmaterial/Bachelorarbeit/Script/Values+Tables.R", echo = TRUE)
df<-df%>% mutate(Status = ifelse(completed_count == 6, 1, 0))
t.test(NA_ave ~ Status, data = df)
t.test(Dynamics ~ Status, data = df)
t.test(NA_base ~ Status, data = df)
df <- df %>%
mutate(Status = if_else(completed_count == 6, "abgeschlossen", "nicht abgeschlossen"))
vergleich_plot <- function(data, y_var_name, y_label = NULL) {
ggplot(data, aes(x = Status, y = .data[[y_var_name]], group = Status, fill = Status)) +
geom_violin(trim = FALSE, color = NA, alpha = 0.5) +
geom_boxplot(width = 0.1, outlier.shape = NA, color = "black", fill="grey") +
stat_boxplot(geom="errorbar", width=.5)+
geom_point(position = position_jitter(width = 0.15), shape = 21, color = "black") +
scale_fill_manual(values = c("abgeschlossen" = "black", "nicht abgeschlossen" = "grey")) +
labs(
x = NULL,
y = if (!is.null(y_label)) y_label else y_var_name
) +
theme_blank()+
theme(legend.position = "none")
}
A<-vergleich_plot(df, "NA_ave", "M negativer Affekt")
B<-vergleich_plot(df, "NA_base", "Negativer Affekt bei Baseline")
C<-vergleich_plot(df, "Dynamics", "Variabilität")
D<-vergleich_plot(df, "Locus", "Locus")
Status_vergleich_plot<-((A+B)/(C+D))
df<-df%>% mutate(Status = ifelse(completed_count == 6, 1, 0))
t.test(NA_ave ~ Status, data = df)
t.test(Dynamics ~ Status, data = df)
t.test(NA_base ~ Status, data = df)
t.test(Locus ~ Status, data = df)
## Ausgabe der Werte in einer Tabelle ##
# Load required packages
# Run t-tests
test_results <- list(
NA_ave = t.test(NA_ave ~ Status, data = df),
Dynamics = t.test(Dynamics ~ Status, data = df),
NA_base = t.test(NA_base ~ Status, data = long_df),
Locus = t.test(Locus ~ Status, data = long_df)
)
# Sample sizes per group (assuming consistent across vars)
n1 <- table(df$Status)[["1"]]
n0 <- table(df$Status)[["0"]]
# Build result table with Cohen's d, 95% CI, and Power
results_df <- bind_rows(lapply(names(test_results), function(var) {
test <- test_results[[var]]
data_used <- if (var %in% c("NA_base", "Locus")) long_df else df
# Calculate effect size
effsize <- cohens_d(as.formula(paste(var, "~ Status")),
data = data_used, ci = 0.95)
d_val <- round(effsize$Cohens_d, 2)
ci_lower <- round(effsize$CI_low, 2)
ci_upper <- round(effsize$CI_high, 2)
d_ci <- paste0(d_val, " [", ci_lower, ", ", ci_upper, "]")
# Power calculation
power_val <- round(pwr.t.test(d = d_val,
n = min(n1, n0),
sig.level = 0.05,
type = "two.sample",
alternative = "two.sided")$power, 2)
data.frame(
Prädiktor = var,
t_Wert = round(test$statistic, 2),
df = round(test$parameter, 0),
p_Wert = format.pval(test$p.value, digits = 3),
`Mittelwert vollständig` = round(test$estimate[["mean in group 1"]], 2),
`Mittelwert unvollständig` = round(test$estimate[["mean in group 0"]], 2),
`Cohen’s d (95% CI)` = d_ci,
Power = power_val
)
}))
# Create formatted flextable
ttesttable<-flextable(results_df) %>%
set_header_labels(
Prädiktor = "Prädiktor",
t_Wert = "t-Wert",
df = "df",
p_Wert = "p-Wert",
`Mittelwert vollständig` = "Mittelwert\nvollständig",
`Mittelwert unvollständig` = "Mittelwert\nunvollständig",
`Cohen’s d (95% CI)` = "Cohen’s d (95%-KI)",
Power = "Power"
) %>%
autofit()
#################Hierarchical linear models #################
long_df$Goal_log <-log(long_df$Goal)
long_df$Goal_log[is.infinite(long_df$Goal_log)] <- 0.000001
long_df$Goal_rank <-rank(long_df$Goal)
null_model_goal<-lme(
Goal_rank~1,
data = long_df,
random = ~ 1| ID,
method = "REML",
na.action = na.omit,
correlation = corAR1(form = ~ Time | ID)
)
icc(null_model_goal)
goal_model1 <- update(null_model_goal, . ~ . + Locus_centered + Dynamics_centered)
source("C:/Users/enno_/OneDrive - Ennos Deutschkurs/A Fernstudium Kursmaterial/Bachelorarbeit/Script/Values+Tables.R", echo = TRUE)
time_plot<-plot_model(goal_model4, type = "pred", terms = "NA_base", show.data = T, jitter = .2, grid = T ,axis.title = c("Trainingseinheit Nr.", "Wahrgenommene Zielerreichung"), title = "Vorhergesagte Ziellerreichung")
time_plot<-plot_model(goal_model4, type = "pred", terms = "NA_base_centered", show.data = T, jitter = .2, grid = T ,axis.title = c("Trainingseinheit Nr.", "Wahrgenommene Zielerreichung"), title = "Vorhergesagte Ziellerreichung")
time_plot
time_plot<-plot_model(goal_model4, type = "pred", terms = "NA_base_centered:Dynamics", show.data = T, jitter = .2, grid = T ,axis.title = c("Trainingseinheit Nr.", "Wahrgenommene Zielerreichung"), title = "Vorhergesagte Ziellerreichung")
goal_model4
goal_model5
time_plot<-plot_model(goal_model5, type = "pred", terms = " Dynamics_centered:NA_base_centered", show.data = T, jitter = .2, grid = T ,axis.title = c("Trainingseinheit Nr.", "Wahrgenommene Zielerreichung"), title = "Vorhergesagte Ziellerreichung")
time_plot<-plot_model(goal_model5, type = "pred", terms = "NA_base_centered", show.data = T, jitter = .2, grid = T ,axis.title = c("Trainingseinheit Nr.", "Wahrgenommene Zielerreichung"), title = "Vorhergesagte Ziellerreichung")
time_plot<-plot_model(goal_model5, type = "pred", terms = "NA_base_centered", show.data = T, jitter = .2, grid = T ,axis.title = c("Trainingseinheit Nr.", "Wahrgenommene Zielerreichung"), title = "Vorhergesagte Ziellerreichung")
time_plot
?plot_model
negative_affect_plot<-plot_model(goal_model3, type = "int", terms = "NegativeAffect_cm_centered", show.data = T, jitter = .2, grid = T, axis.title = c("Negative Affect", "Wahrgenommene Zielerreichung"), title = "Vorhergesagte Ziellerreichung durch NA")
pred_plot_NA_base<-plot_model(goal_model5, type = "pred", terms = "NA_base_centered", show.data = T, jitter = .2, grid = T ,axis.title = c("Trainingseinheit Nr.", "Wahrgenommene Zielerreichung"), title = "Vorhergesagte Ziellerreichung")
interaction_plot_NA.Dynamics<-plot_model(goal_model5, type = "int", terms = " Dynamics_centered:NA_base_centered", show.data = T, jitter = .2, grid = T ,axis.title = c("Trainingseinheit Nr.", "Wahrgenommene Zielerreichung"), title = "Vorhergesagte Ziellerreichung")
interaction_plot_NA.Dynamics
pred_plot_NA_base<-plot_model(goal_model5, type = "pred", terms = "Dynamics_centered:NA_base_centered", show.data = T, jitter = .2, grid = T ,axis.title = c("Trainingseinheit Nr.", "Wahrgenommene Zielerreichung"), title = "Vorhergesagte Ziellerreichung")
interaction_plot_NA_Dynamics <- plot_model(
goal_model5,
type = "int",
terms = c("Dynamics_centered", "NA_base_centered [meansd]"),
show.data = TRUE,
jitter = 0.2,
grid = TRUE,
axis.title = c("Trainingsdynamik (zentriert)", "Vorhergesagte Zielerreichung"),
title = "Interaktion: NA bei Baseline x Dynamik"
)
interaction_plot_NA.Dynamics
interaction_plot_NA_Dynamics
interaction_plot_NA.Dynamics<-plot_model(goal_model5, type = "int", terms = c("Dynamics_centered[meansd]", "NA_base_centered [meansd]"), show.data = T, jitter = .2, grid = T ,axis.title = c("Trainingseinheit Nr.", "Wahrgenommene Zielerreichung"), title = "Vorhergesagte Ziellerreichung")
interaction_plot_NA.Dynamics
interaction_plot_NA.Dynamics<-plot_model(goal_model5, type = "int", terms = c("Dynamics_centered", "NA_base_centered"), mdrt.values = "meansd", show.data = T, jitter = .2, grid = T ,axis.title = c("Trainingseinheit Nr.", "Wahrgenommene Zielerreichung"), title = "Vorhergesagte Ziellerreichung")
interaction_plot_NA.Dynamics
interaction_plot_NA.Dynamics<-plot_model(goal_model5, type = "int", terms = c("Dynamics_centered", "NA_base_centered"), mdrt.values = "meansd", show.data = F, jitter = .2, grid = T ,axis.title = c("Trainingseinheit Nr.", "Wahrgenommene Zielerreichung"), title = "Vorhergesagte Ziellerreichung")
interaction_plot_NA.Dynamics
#z-Standardisierung zur besseren Interpretierbarkeit aller Variablen
zstandard_varnames<-df %>% ungroup() %>% dplyr::select(- "ID", -"Programme" ,-"Age"    ,-   "Gender" , - "WeeklyKM_base", "WeeklyH_base" , -"SportCode", -ends_with("_ave")) %>% names() #https://stackoverflow.com/questions/38511743/adding-missing-grouping-variables-message-in-dplyr-in-r
source("C:/Users/enno_/OneDrive - Ennos Deutschkurs/A Fernstudium Kursmaterial/Bachelorarbeit/Script/Functions_and_Packages.R", echo=TRUE)
#z-Standardisierung zur besseren Interpretierbarkeit aller Variablen
zstandard_varnames<-df %>% ungroup() %>% dplyr::select(- "ID", -"Programme" ,-"Age"    ,-   "Gender" , - "WeeklyKM_base", "WeeklyH_base" , -"SportCode", -ends_with("_ave")) %>% names() #https://stackoverflow.com/questions/38511743/adding-missing-grouping-variables-message-in-dplyr-in-r
View(df)
#z-Standardisierung zur besseren Interpretierbarkeit aller Variablen
zstandard_varnames<-df %>% ungroup() %>% dplyr::select(- "ID",-"Age"    ,-   "Gender" , - "WeeklyKM_base", "WeeklyH_base" , -"SportCode", -ends_with("_ave")) %>% names() #https://stackoverflow.com/questions/38511743/adding-missing-grouping-variables-message-in-dplyr-in-r
#z-Standardisierung zur besseren Interpretierbarkeit aller Variablen
zstandard_varnames<-df %>% ungroup() %>% dplyr::select(- "ID",-"Age"    ,-   "Gender" , - "WeeklyKM_base", "WeeklyH_base", -ends_with("_ave")) %>% names() #https://stackoverflow.com/questions/38511743/adding-missing-grouping-variables-message-in-dplyr-in-r
df_z <- df %>%  mutate_at(zstandard_varnames, ~ (scale(.))) # Hier werden dann [,1] im Variablen angezeigt, aber nur im Viewer???
df %>% where(is.numeric())
df %>% dplyr::select(is.numeric())
#z-Standardisierung zur besseren Interpretierbarkeit aller Variablen
zstandard_varnames<-df %>% ungroup() %>% dplyr::select(- "ID",-"Age"    ,- "Aim", -"Sport", -   "Gender" , - "WeeklyKM_base", "WeeklyH_base", -ends_with("_ave")) %>% names() #https://stackoverflow.com/questions/38511743/adding-missing-grouping-variables-message-in-dplyr-in-r
df_z <- df %>%  mutate_at(zstandard_varnames, ~ (scale(.))) # Hier werden dann [,1] im Variablen angezeigt, aber nur im Viewer???
#z-Standardisierung zur besseren Interpretierbarkeit aller Variablen
zstandard_varnames<-df %>% ungroup() %>% dplyr::select(- "ID",-"Age"    ,- "Aim", -"Sport", -   "Gender" , - "WeeklyKM_base", "WeeklyH_base", -ends_with("_ave"), -starts_with("complete")) %>% names() #https://stackoverflow.com/questions/38511743/adding-missing-grouping-variables-message-in-dplyr-in-r
df_z <- df %>%  mutate_at(zstandard_varnames, ~ (scale(.))) # Hier werden dann [,1] im Variablen angezeigt, aber nur im Viewer???
zstandard_varnames
#z-Standardisierung zur besseren Interpretierbarkeit aller Variablen
zstandard_varnames<-df %>% ungroup() %>% dplyr::select(- "ID",-"Age"    ,- "Aim", -"Sport", -   "Gender" , - "WeeklyKM_base", "WeeklyH_base", -ends_with("_ave"), -starts_with("complet"), "Status") %>% names() #https://stackoverflow.com/questions/38511743/adding-missing-grouping-variables-message-in-dplyr-in-r
df_z <- df %>%  mutate_at(zstandard_varnames, ~ (scale(.))) # Hier werden dann [,1] im Variablen angezeigt, aber nur im Viewer???
df %>% select(ztandard_varnames)
df %>% select(c(ztandard_varnames))
df %>% select(zstandard_varnames)
#z-Standardisierung zur besseren Interpretierbarkeit aller Variablen
zstandard_varnames<-df %>% ungroup() %>% dplyr::select(- "ID",-"Age"    ,- "Aim", -"Sport", -   "Gender" , - "WeeklyKM_base", "WeeklyH_base", -ends_with("_ave"), -starts_with("complet"), -"Status") %>% names() #https://stackoverflow.com/questions/38511743/adding-missing-grouping-variables-message-in-dplyr-in-r
#z-Standardisierung zur besseren Interpretierbarkeit aller Variablen
zstandard_varnames<-df %>% ungroup() %>% dplyr::select(- "ID",-"Age"    ,- "Aim", -"Sport", -   "Gender" , - "WeeklyKM_base", "WeeklyH_base", -ends_with("_ave"), -starts_with("complet"), -"Status") %>% names() #https://stackoverflow.com/questions/38511743/adding-missing-grouping-variables-message-in-dplyr-in-r
df %>% select(all_of(zstandard_varnames))
df_z <- df %>%  mutate_at(zstandard_varnames, ~ (scale(.))) # Hier werden dann [,1] im Variablen angezeigt, aber nur im Viewer???
# Check the classes of all variables in zstandard_varnames
df %>%
select(all_of(zstandard_varnames)) %>%
summarise(across(everything(), ~ !is.numeric(.))) %>%
pivot_longer(everything(), names_to = "variable", values_to = "not_numeric") %>%
filter(not_numeric)
#z-Standardisierung zur besseren Interpretierbarkeit aller Variablen
zstandard_varnames<-df %>% ungroup() %>% dplyr::select(-"Notes", -"Sport2", - "ID",-"Age"    ,- "Aim", -"Sport", -   "Gender" , - "WeeklyKM_base", "WeeklyH_base", -ends_with("_ave"), -starts_with("complet"), -"Status") %>% names() #https://stackoverflow.com/questions/38511743/adding-missing-grouping-variables-message-in-dplyr-in-r
df %>% select(all_of(zstandard_varnames))
df_z <- df %>%  mutate_at(zstandard_varnames, ~ (scale(.))) # Hier werden dann [,1] im Variablen angezeigt, aber nur im Viewer???
df_z
View(df_z)
df_z$Locus
class(df_z$Locus)
df_z <- df %>%  mutate_at(zstandard_varnames, ~ as.numeric(scale(.))) # Hier werden dann [,1] im Variablen angezeigt, aber nur im Viewer???
long_df_z <- long_df %>%  mutate_at(zstandard_varnames, ~ as.numeric(scale(.)))
zstandard_varnames_long<-long_df %>% ungroup() %>% dplyr::select(-"Notes", -"Sport2", - "ID",-"Age"    ,- "Aim", -"Sport", -   "Gender" , - "WeeklyKM_base", "WeeklyH_base", -ends_with("_ave"), -starts_with("complet"), -"Status") %>% names() #https://stackoverflow.com/questions/38511743/adding-missing-grouping-variables-message-in-dplyr-in-r
long_df_z <- long_df %>%  mutate_at(zstandard_varnames, ~ as.numeric(scale(.)))
long_df_z <- long_df %>%  mutate_at(zstandard_varnames_long, ~ as.numeric(scale(.)))
source("C:/Users/enno_/OneDrive - Ennos Deutschkurs/A Fernstudium Kursmaterial/Bachelorarbeit/Script/Import+Bereinigung.R", echo=TRUE)
devtools::install_github("benmarwick/wordcountaddin",  type = "source", dependencies = TRUE)
